from _typeshed import Incomplete
from typing import Any, Union

import numpy as np

from .tdms import TdmsFile
from .timestamp import TdmsTimestamp, TimestampArray

tdms_file = Union[TdmsFile, str]

tds_data_types: Incomplete
numpy_data_types: Incomplete

class TdmsType:
    size: int
    value: Incomplete
    bytes: Incomplete
    def __init__(self) -> None: ...
    def __eq__(self, other): ...
    @classmethod
    def read(cls, file: Any, endianness: str = ...) -> Any: ...
    @classmethod
    def read_values(cls, file: Any, number_values: Any, endianness: str = ...) -> Any: ...

class Int8(StructType): ...
class Int16(StructType): ...
class Int32(StructType): ...
class Int64(StructType): ...
class Uint8(StructType): ...
class Uint16(StructType): ...
class Uint32(StructType): ...
class Uint64(StructType): ...
class SingleFloat(StructType): ...
class DoubleFloat(StructType): ...
class SingleFloatWithUnit(StructType): ...
class DoubleFloatWithUnit(StructType): ...

class StructType(TdmsType):
    struct_declaration: str
    nptype: Incomplete
    value: Any
    bytes: Incomplete
    def __init__(self, value: Any) -> None: ...
    @classmethod
    def read(cls, file: tdms_file, endianness: str = ...) -> Any: ...
    @classmethod
    def from_bytes(cls, byte_array: str, endianness: str = ...) -> np.ndarray[Any, Any]: ...

class Void(TdmsType): ...
class Bytes(TdmsType): ...
class ExtendedFloatWithUnit(TdmsType): ...

class String(TdmsType):
    def __init__(self, value: str) -> None: ...
    @staticmethod
    def read(file: tdms_file, endianness: str = ...) -> str: ...
    @classmethod
    def read_values(cls, file: tdms_file, number_values: int, endianness: str = ...) -> str: ...

class Boolean(StructType):
    def __init__(self, value: bool) -> None: ...
    @classmethod
    def read(cls, file: tdms_file, endianness: str = ...) -> bool: ...

class TimeStamp(TdmsType):
    def __init__(self, value: np.datetime64) -> None: ...
    @classmethod
    def read(cls, file: tdms_file, endianness: str = ...) -> TdmsTimestamp: ...
    @classmethod
    def from_bytes(cls, byte_array: np.ndarray[Any, Any], endianness: str = ...) -> TimestampArray: ...

class ComplexSingleFloat(TdmsType): ...
class ComplexDoubleFloat(TdmsType): ...
class DaqMxRawData(TdmsType): ...
