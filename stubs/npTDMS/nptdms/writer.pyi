from io import BytesIO as BytesIO
from types import TracebackType
from typing import Any, Mapping, Optional, Type, Union, OrderedDict
from typing_extensions import Self
from collections.abc import Iterable

import numpy as np
from nptdms.tdms import TdmsFile
from nptdms.types import String

tdms_properties = Mapping[str, Any]
tdms_file = Union[TdmsFile, str]

class TdmsWriter:
    @classmethod
    def defragment(cls, source: tdms_file, destination: tdms_file, version: int = ..., index_file: bool = ...) -> None: ...
    def __init__(self, file: tdms_file, mode: str = ..., version: int = ..., index_file: bool = ...) -> None: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def write_segment(self, objects: list[TdmsObject]) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(
        self, exc_type: Optional[Type[BaseException]], exc_value: Optional[BaseException], exc_traceback: Optional[TracebackType]
    ) -> None: ...

class TdmsSegment:
    objects: list[TdmsObject]
    is_index_file: bool
    def __init__(self, objects: list[TdmsObject], is_index_file: bool = ..., version: int = ...) -> None: ...
    def write(self, file: tdms_file) -> None: ...
    def metadata(self) -> list[Any]: ...
    def raw_data_index(self, obj: TdmsObject) -> list[bytes]: ...
    def leadin(self, toc: Iterable[Any], metadata_size: int) -> list[Any]: ...

class TdmsObject:
    @property
    def has_data(self) -> bool: ...
    @property
    def data_type(self) -> Any: ...
    @property
    def path(self) -> str: ...

class RootObject(TdmsObject):
    properties: tdms_properties
    def __init__(self, properties: Optional[tdms_properties] = ...) -> None: ...
    @property
    def path(self) -> str: ...

class GroupObject(TdmsObject):
    group: str
    properties: tdms_properties
    def __init__(self, group: str, properties: Optional[tdms_properties] = ...) -> None: ...
    @property
    def path(self) -> str: ...

class ChannelObject(TdmsObject):
    group: str
    channel: str
    data: np.ndarray[Any, Any]
    properties: tdms_properties
    def __init__(
        self, group: str, channel: str, data: np.ndarray[Any, Any], properties: Optional[tdms_properties] = ...
    ) -> None: ...
    @property
    def has_data(self) -> bool: ...
    @property
    def data_type(self) -> Any: ...
    @property
    def path(self) -> str: ...

def read_properties_dict(properties_dict: dict[Any, Any]) -> OrderedDict[Any, Any]: ...
def to_int_property_value(value: Any) -> int: ...
def write_data(file: tdms_file, tdms_object: TdmsObject) -> None: ...
def to_file(file: tdms_file, array: np.ndarray[Any, Any]) -> None: ...
def write_values(file: tdms_file, array: np.ndarray[Any, Any]) -> None: ...
def write_string_values(file: tdms_file, strings: list[String]) -> None: ...
def object_data_size(data_type: TdmsObject, data_values: Iterable[Any]) -> int: ...
