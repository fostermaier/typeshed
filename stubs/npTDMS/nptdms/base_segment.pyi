from _typeshed import Incomplete
from collections.abc import Generator
from io import UnsupportedOperation as UnsupportedOperation

log: Incomplete

class BaseSegmentObject:
    path: Incomplete
    number_values: int
    data_size: int
    has_data: bool
    data_type: Incomplete
    def __init__(self, path) -> None: ...
    def read_raw_data_index(self, file, raw_data_index_header, endianness) -> None: ...
    @property
    def scaler_data_types(self) -> None: ...

class BaseDataReader:
    num_chunks: Incomplete
    final_chunk_lengths_override: Incomplete
    endianness: Incomplete
    def __init__(self, num_chunks, final_chunk_lengths_override, endianness) -> None: ...
    def read_data_chunks(self, file, data_objects, num_chunks) -> Generator[Incomplete, None, None]: ...
    def read_channel_data_chunks(
        self, file, data_objects, channel_path, chunk_offset, stop_chunk
    ) -> Generator[Incomplete, None, None]: ...

class RawDataChunk:
    def __init__(self, channel_data) -> None: ...
    @staticmethod
    def empty(): ...
    @staticmethod
    def channel_data(data): ...
    @staticmethod
    def scaler_data(data): ...

class RawChannelDataChunk:
    data: Incomplete
    def __init__(self, data, scaler_data) -> None: ...
    def __len__(self) -> int: ...
    @staticmethod
    def empty(): ...
    @staticmethod
    def channel_data(data): ...
    @staticmethod
    def scaler_data(data): ...

def fromfile(file, dtype, count, *args, **kwargs): ...
def read_interleaved_segment_bytes(f, bytes_per_row, num_values): ...
def data_chunk_to_channel_chunk(data_chunk, channel_path): ...
