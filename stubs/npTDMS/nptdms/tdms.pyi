import pathlib
from collections.abc import Generator
from types import TracebackType
from typing import Any, Mapping, Optional, Type, Union

import numpy as np
import pandas as pd

from .timestamp import TimestampArray
from .types import TdmsType

file_path = Union[str, pathlib.Path]
tdms_file = Union[TdmsFile, file_path]
memmap_type = Optional[dict[str, Any]]
tdms_properties = Mapping[str, Any]
raw_chunk = np.ndarray[Any, Any]

log: int

class TdmsFile:
    @staticmethod
    def read(file: tdms_file, raw_timestamps: bool = ..., memmap_dir: memmap_type = ...) -> TdmsFile: ...
    @staticmethod
    def open(file: tdms_file, raw_timestamps: bool = ..., memmap_dir: memmap_type = ...) -> TdmsFile: ...
    @staticmethod
    def read_metadata(file: tdms_file, raw_timestamps: bool = ...) -> TdmsFile: ...
    data_read: bool
    def __init__(
        self,
        file: tdms_file,
        raw_timestamps: bool = ...,
        memmap_dir: memmap_type = ...,
        read_metadata_only: bool = ...,
        keep_open: bool = ...,
    ) -> None: ...
    def groups(self): ...
    @property
    def tdms_version(self): ...
    @property
    def properties(self): ...
    def as_dataframe(self, time_index: bool = ..., absolute_time: bool = ..., scaled_data: bool = ...) -> pd.DataFrame: ...
    def as_hdf(self, filepath: file_path, mode: str = ..., group: str = ...) -> None: ...
    def data_chunks(self) -> Generator[TdmsType, None, None]: ...
    def close(self) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __getitem__(self, group_name): ...
    def __enter__(self): ...
    def __exit__(
        self, exc_type: Optional[Type[BaseException]], exc_value: Optional[BaseException], traceback: Optional[TracebackType]
    ) -> None: ...

class TdmsGroup:
    properties: tdms_properties
    def __init__(self, path: str, properties: tdms_properties, channels: list["TdmsChannel"]) -> None: ...
    @property
    def path(self): ...
    @property
    def name(self): ...
    def channels(self): ...
    def as_dataframe(self, time_index: bool = ..., absolute_time: bool = ..., scaled_data: bool = ...) -> pd.DataFrame: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __getitem__(self, channel_name): ...

class TdmsChannel:
    properties: tdms_properties
    data_type: TdmsType
    scaler_data_types: TdmsType
    def __init__(
        self,
        path: file_path,
        data_type: TdmsType,
        scaler_data_types: TdmsType,
        number_values: int,
        properties: tdms_properties,
        group_properties: tdms_properties,
        file_properties: tdms_properties,
        tdms_reader: tdms_file,
        raw_timestamps: TimestampArray,
        memmap_dir: memmap_type,
    ) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __getitem__(self, index): ...
    @property
    def path(self): ...
    @property
    def name(self): ...
    @property
    def group_name(self): ...
    def dtype(self): ...
    def data(self): ...
    @property
    def raw_data(self): ...
    @property
    def raw_scaler_data(self): ...
    def data_chunks(self) -> Generator[TdmsType, None, None]: ...
    def read_data(self, offset: int = ..., length: int = ..., scaled: bool = ...) -> np.ndarray[Any, Any]: ...
    def time_track(self, absolute_time: bool = ..., accuracy: str = ...) -> np.ndarray[Any, Any]: ...
    def as_dataframe(self, time_index: bool = ..., absolute_time: bool = ..., scaled_data: bool = ...) -> pd.DataFrame: ...

class DataChunk:
    def __init__(self, tdms_file: tdms_file, raw_data_chunk: raw_chunk, channel_offsets: int) -> None: ...
    def __getitem__(self, group_name): ...
    def groups(self): ...

class GroupDataChunk:
    name: str
    def __init__(self, tdms_file: tdms_file, group: str, raw_data_chunk: raw_chunk, channel_offsets: int) -> None: ...
    def __getitem__(self, channel_name): ...
    def channels(self): ...

class ChannelDataChunk:
    name: str
    offset: int
    def __init__(self, channel: TdmsChannel, raw_data_chunk: raw_chunk, offset: int) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
